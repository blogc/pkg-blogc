.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "BLOGC\-TEMPLATE" "7" "May 2019" "Rafael G. Martins" "blogc Manual"
.
.SH "NAME"
\fBblogc\-template\fR \- blogc\'s template format
.
.SH "DESCRIPTION"
Template files are used as base to build output files by blogc(1)\. These files can include variables, blocks, conditionals and iterators, that will directly affect the output files\.
.
.P
The syntax of the template files is defined to be simple, without affecting the content output\. The syntax is somewhat inspired by Jinja2 syntax\.
.
.P
Templates must be valid UTF\-8\.
.
.P
This manual describes the basic syntax and functionalities of template files\.
.
.SH "TEMPLATE BLOCKS"
Template blocks are used to delimit content\. The content inside a block will be included in the output file (or not) if the parameters passed to blogc(1) matches the requirements of the given block\.
.
.P
Blocks can be defined more than once, but can\'t be nested\.
.
.P
The available blocks are: \fBentry\fR, \fBlisting\fR and \fBlisting_once\fR\.
.
.SS "entry block"
The content of an \fBentry\fR block is included in the output file when blogc(1) is called without \fB\-l\fR option, and with only one source file\. It is used to render a single entry of your blog/website\. All the variables defined in the source file are available inside this block (see blogc\-source(7)), and will override global variables (see blogc(1))\.
.
.P
This is how an \fBentry\fR block is defined:
.
.IP "" 4
.
.nf

{% block entry %}
This content will only be included when rendering a single entry\.
{% endblock %}
.
.fi
.
.IP "" 0
.
.SS "listing block"
The content of a \fBlisting\fR block is included in the output file when blogc(1) is called with \fB\-l\fR option, and with zero or more source files\. It is used to create a listing of entries, and its content will be included once for each given source file (in the order that the source files were provided to blogc(1))\. All the variables defined in the source files are available inside this block (see blogc\-source(7)), and will override global variables (see blogc(1))\. The variables will be provided by each file, when blogc(1) iterates over them\.
.
.P
This is how a \fBlisting\fR block is defined:
.
.IP "" 4
.
.nf

{% block listing %}
This content will be only included when rendering an entry listing, and
will be included once for each entry\.
{% endblock %}
.
.fi
.
.IP "" 0
.
.SS "listing_once block"
The content of a \fBlisting_once\fR block is included in the output file when blogc(1) is called with \fB\-l\fR option, and with zero or more source files\. It is like a \fBlisting\fR block, but is only called once, and does not have access to the local variables defined in the source files\. It is useful to add something before an entry listing\.
.
.P
The content of a \fBlisting_once\fR block is included even if no source file is provided\.
.
.P
This is how a \fBlisting_once\fR block is defined:
.
.IP "" 4
.
.nf

{% block listing_once %}
This content will be only included when rendering an entry listing, but
will be included only once\.
{% endblock %}
.
.fi
.
.IP "" 0
.
.P
This is a \'real life\' usage example of a \fBlisting_once\fR block, supposing that the \fBTITLE\fR variable is defined:
.
.IP "" 4
.
.nf

{% block listing_once %}
<ul>
{% endblock %}
{% block listing %}
<li>{{ TITLE }}</li>
{% endblock %}
{% block listing_once %}
</ul>
{% endblock %}
.
.fi
.
.IP "" 0
.
.SS "listing_entry block"
This block is identical to the \fBentry\fR block, but its content is included in the output file only when blogc(1) is called with \fB\-l\fR and \fB\-e\fR \fISOURCE\fR\. The variables available in the block are provided by the source file provided using \fB\-e\fR\.
.
.P
This is how a \fBlisting_entry\fR block is defined:
.
.IP "" 4
.
.nf

{% block listing_entry %}
This content will only be included when rendering a listing, but with
content provided by a single entry\.
{% endblock %}
.
.fi
.
.IP "" 0
.
.SH "TEMPLATE VARIABLES"
Template variables are used to provide content to templates from blogc(1) command\-line and from source files\.
.
.P
This is how a variable is defined in a template:
.
.IP "" 4
.
.nf

{{ VARIABLE_NAME }}
.
.fi
.
.IP "" 0
.
.P
The value of a variable will depends of its scope\. Global variables provided to blogc(1) are available everywhere in the templates\. Local variables provided in the source files are available only inside \fBentry\fR and \fBlisting\fR blocks, and will override global variables\.
.
.P
If a variable is not defined, it will be replaced by an empty string\. blogc(1) won\'t raise any error in this case\.
.
.P
Variables are always strings, even if the value of the variable is a number, it is handled as a string by blogc(1)\.
.
.SS "Variable formatters"
blogc(1) can apply a formatter to a variable, depending on how it is called in the template\. If user append \fB_FORMATTED\fR to the end of the variable name, a formatter will be applied, if available for the variable name:
.
.IP "\(bu" 4
Date formatter: if variable name starts with \fBDATE_\fR, it is formatted with a strftime(3) format, provided by \fBDATE_FORMAT\fR variable\. The \fBDATE_FORMATTED\fR "meta\-variable" will return the formatted version of the \fBDATE\fR variable\. If \fBDATE_FORMAT\fR is not provided, the original value will be returned\.
.
.IP "" 0
.
.P
An existing variable is not overrided by formatter\. That means that if \fBFOO_FORMATTED\fR variable exists, it won\'t be handled as a formatter "meta\-variable", and \fBFOO_FORMATTED\fR variable value will be returned normally\.
.
.SS "Truncated variables"
blogc(1) can truncate the value of a variable to a maximum length, if it is called with the maximum length appended to the end of the variable, like: \fBFOO_5\fR will return the 5 first characters of the \fBFOO\fR variable, if bigger than 5 characters\.
.
.P
This is applicable to the "meta\-variables", like \fBDATE_FORMATTED\fR\. It can be truncated like: \fBDATE_FORMATTED_5\fR, that will return the 5 first characters of the \fBDATE_FORMATTED\fR "meta\-variable"\.
.
.P
An existing variable is not overrided by the truncate syntax\. That means that if \fBFOO_5\fR variable exists, it won\'t be handled as a truncate "meta\-variable", and \fBFOO_5\fR variable value will be returned normally\.
.
.SH "PREDEFINED TEMPLATE VARIABLES"
blogc(1) provides some template variables, that can be used to display some build metadata in your website\.
.
.P
If some of the variables are not available in the system running the build, they won\'t be defined\. It is recommended to rely on template conditionals, mainly \fBifdef\fR and \fBifndef\fR when using these variables\.
.
.SS "Static variables"
These variables are always available, and are set during the blogc(1) binary compilation\.
.
.TP
\fBBLOGC_VERSION\fR
The version of blogc(1) used to build\. e\.g\.: \fBblogc 0\.14\.1\fR\.
.
.SS "Resource usage variables"
It is not possible to measure the resource usage of blogc(1) until the end of the execution, because the rendering of these variables itself is using resources, and the evaluation of the used resources was already done\. To get better values, it is recommended to use these variables only in the website footer\.
.
.TP
\fBBLOGC_RUSAGE_CPU_TIME\fR
The CPU time used to build, up to the point where this variable was used for the first time in the template (value is cached)\. e\.g\.: \fB12\.345ms\fR\.
.
.TP
\fBBLOGC_RUSAGE_MEMORY\fR
The memory used to build, up to the point where this variable was used for the first time in the template (value is cached)\. e\.g\.: \fB1\.234MB\fR\.
.
.SS "System information variables"
.
.TP
\fBBLOGC_SYSINFO_HOSTNAME\fR
The hostname of the machine where the build happened (short hostname only, not FQDN)\.
.
.TP
\fBBLOGC_SYSINFO_USERNAME\fR
The username of the user that executed the build\.
.
.TP
\fBBLOGC_SYSINFO_DATETIME\fR
The GMT datetime of the build\. e\.g\. \fB2019\-02\-10 22:00:00\fR\.
.
.TP
\fBBLOGC_SYSINFO_INSIDE_DOCKER\fR
If built inside a docker container, this variable will be defined, with value \fB1\fR\.
.
.SH "TEMPLATE CONDITIONALS"
Template conditionals are used to include content to the output, or not, based on the value and existence of variables in the current scope\.
.
.P
The implementation of conditionals is simple, and each will just evaluate the value of a single variable\.
.
.P
The available conditionals are: \fBifdef\fR, \fBifndef\fR and \fBif\fR\. \fBelse\fR statements are supported\.
.
.SS "ifdef conditional"
The content of an \fBifdef\fR conditional is included in the output file when the given variable is defined in the current scope\.
.
.P
This is how an \fBifdef\fR conditional is defined in a template:
.
.IP "" 4
.
.nf

{% ifdef TITLE %}
This is title: {{ TITLE }}
{% else %}
Untitled entry
{% endif %}
.
.fi
.
.IP "" 0
.
.P
In this case, if the \fBTITLE\fR variable is defined, the content after the statement is included\. Otherwise, the content after \fBelse\fR statement is included\.
.
.SS "ifndef conditional"
The content of an \fBifndef\fR conditional is included in the output file when the given variable is not defined in the current scope\.
.
.P
This is how an \fBifndef\fR conditional is defined in a template:
.
.IP "" 4
.
.nf

{% ifndef TITLE %}
Untitled entry
{% endif %}
.
.fi
.
.IP "" 0
.
.P
In this case, if the \fBTITLE\fR variable is not defined, the content is included\. \fBelse\fR statements are supported here, even if it does not makes much sense to be used this way\.
.
.SS "if conditional"
The content of an \fBif\fR conditional is included in the output file when the comparision between the given variable and the given static string or variable evaluates to true in the current scope\. The left operand of the comparision \fImust\fR be a variable\.
.
.P
The available operators are: \fB==\fR, \fB!=\fR, \fB<\fR, \fB>\fR, \fB<=\fR and \fB>=\fR\. The comparisions are strcmp(3)\-like\.
.
.P
This is how an \fBif\fR conditional is defined in a template:
.
.IP "" 4
.
.nf

{% if TITLE == "My Title" %}
Special description of "My Title"
{% else %}
Title is {{ TITLE }}
{% endif %}
.
.fi
.
.IP "" 0
.
.P
Or:
.
.IP "" 4
.
.nf

{% if TITLE == DEFAULT_TITLE %}
Title is the default title
{% endif %}
.
.fi
.
.IP "" 0
.
.SH "TEMPLATE ITERATORS"
Template iterators are used to iterate over the value of a variable, that is handled as a list\.
.
.P
The available conditionals are: \fBforeach\fR\.
.
.SS "foreach iterator"
The content of a \fBforeach\fR iterator is included in the output file when the target variable is defined, and is repeated for each item in the list parsed from the variable value\.
.
.P
The variable value should be formatted as a space\-separated list of items\. Quotes are not supported, as this is intended to work with identifiers, like slugs, and not with arbitrary strings\.
.
.P
This is how a variable value would be formatted:
.
.IP "" 4
.
.nf

item1 item2 item3
.
.fi
.
.IP "" 0
.
.P
For more info about how to define variables, see blogc(1) and blogc\-source(7)\.
.
.P
This is how a \fBforeach\fR iterator is defined in a template:
.
.IP "" 4
.
.nf

{% foreach TAGS %}
<a href="/tag/{{ FOREACH_ITEM }}/">{{ FOREACH_ITEM }}</a>
{% endforeach %}
.
.fi
.
.IP "" 0
.
.P
Where \fBTAGS\fR is the variable with space\-separated list of items, and \fBFOREACH_ITEM\fR is the variable defined by blogc(1), that will store the item value for a given iteration\.
.
.P
If the value of the \fBTAGS\fR variable is "item1 item2 item3", this template is rendered 3 times, one for each item value\.
.
.P
The \fBFOREACH_ITEM\fR variable can be truncated, like:
.
.IP "" 4
.
.nf

{% foreach TAGS %}
<a href="/tag/{{ FOREACH_ITEM }}/">{{ FOREACH_ITEM_5 }}</a>
{% endforeach %}
.
.fi
.
.IP "" 0
.
.SH "WHITESPACE CONTROL"
Users can control how whitespaces (space, form\-feed (\fB\ef\fR), newline (\fB\en\fR), carriage return (\fB\er\fR), horizontal tab (\fB\et\fR), and vertical tab (\fB\ev\fR)) are handled before and after statements delimited with \fB{%\fR and \fB%}\fR sequences, respectively\.
.
.P
Adding a minus sign (\fB\-\fR) after a \fB{%\fR sequence (\fB{%\-\fR) will remove whitespaces before the sequence and after the last non\-whitespace character before the sequence\.
.
.P
Adding a minus sign (\fB\-\fR) before a \fB%}\fR sequence (\fB\-%}\fR) will remove whitespaces after the sequence and before the first non\-whitespace character after the sequence\.
.
.SH "BUGS"
The template content is handled by handwritten parsers, that even being well tested, may be subject of parsing bugs\. Please report any issues to: \fIhttps://github\.com/blogc/blogc\fR
.
.SH "AUTHOR"
Rafael G\. Martins <\fIrafael@rafaelmartins\.eng\.br\fR>
.
.SH "SEE ALSO"
blogc(1), blogc\-source(7), strcmp(3), strftime(3)
